{"version":3,"sources":["hooks/useAppSelector.ts","hooks/useAppDispatch.ts","store/gameSlice.ts","store/timeSlice.ts","store/cardsSlice.ts","components/GameBar.tsx","components/PlaygroundWinMessage.tsx","components/PlaygroundTimer.tsx","components/PlaygroundTableCard.tsx","components/PlaygroundTable.tsx","support/shuffle.ts","support/initCards.ts","components/Playground.tsx","components/ResultTableItem.tsx","components/ResultTable.tsx","components/Result.tsx","App.tsx","store.ts","index.tsx"],"names":["useAppSelector","useSelector","useAppDispatch","useDispatch","gameSlice","createSlice","name","initialState","won","started","points","result","reducers","win","state","resetWin","gameStart","gameStop","addPoint","addResult","payload","resetPoints","actions","timeSlice","timer","stopwatch","tickTimer","tickStopWatch","moment","hour","minute","second","format","resetTimer","resetStopwatch","cardsSlice","first","id","value","inGame","valuesOfRemoved","setFirstId","setFirstValue","setSecondId","setSecondValue","removeValueOfPairedCards","resetCards","resetValuesOfRemoved","GameBar","dispatch","time","game","useEffect","seconds","setInterval","clearInterval","className","onClick","PlaygroundWinMessage","PlaygroundTimer","PlaygroundTableCard","firstId","secondId","gameStarted","cardRemoved","src","alt","toString","width","PlaygroundTable","cards","firstCardId","secondCardId","map","row","index","includes","shuffle","array","sort","Math","random","initCards","totalCards","count","side","sqrt","currentValue","currentId","i","j","push","Playground","useState","setCards","firstCardValue","secondCardValue","process","setTimeout","length","ResultTableItem","ResultTable","Result","App","store","configureStore","reducer","cardsReducer","gameReducer","timeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8079380d.chunk.js","sourcesContent":["import {TypedUseSelectorHook, useSelector} from 'react-redux'\nimport type {RootState} from '../store'\n\nconst useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n\nexport default useAppSelector","import {useDispatch} from 'react-redux'\nimport type {AppDispatch} from '../store'\n\nconst useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport default useAppDispatch","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\n\ninterface GameState {\n    won: boolean\n    started: boolean\n    points: number\n    result: ResultItem[]\n}\n\nconst initialState: GameState = {\n    won: false,\n    started: false,\n    points: 0,\n    result: [],\n}\n\nexport const gameSlice = createSlice({\n    name: 'game',\n    initialState,\n    reducers: {\n        win: state => {\n            state.won = true\n        },\n        resetWin: state => {\n            state.won = false\n        },\n        gameStart: state => {\n            state.started = true\n        },\n        gameStop: state => {\n            state.started = false\n        },\n        addPoint: state => {\n            state.points += 1\n        },\n        addResult: (state, {payload}: PayloadAction<ResultItem>) => {\n            state.result = [payload, ...state.result]\n        },\n        resetPoints: state => {\n            state.points = 0\n        },\n    },\n})\n\nexport const {\n    win,\n    resetWin,\n    gameStart,\n    gameStop,\n    addPoint,\n    addResult,\n    resetPoints,\n} = gameSlice.actions\n\nexport default gameSlice.reducer","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\nimport moment from 'moment'\n\nexport const timeSlice = createSlice({\n    name: 'time',\n    initialState: {\n        timer: 5,\n        stopwatch: '00:00:00',\n    },\n    reducers: {\n        tickTimer: state => {\n            state.timer -= 1\n        },\n        tickStopWatch: (state, {payload}: PayloadAction<number>) => {\n            state.stopwatch = moment().hour(0).minute(0).second(payload).format('HH:mm:ss')\n        },\n        resetTimer: state => {\n            state.timer = 5\n        },\n        resetStopwatch: state => {\n            state.stopwatch = '00:00:00'\n        },\n    },\n})\n\nexport const {\n    tickTimer,\n    resetTimer,\n    tickStopWatch,\n    resetStopwatch,\n} = timeSlice.actions\n\nexport default timeSlice.reducer","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\n\ninterface CardsState {\n    first: {\n        id: number | null\n        value: number | null\n    }\n    second: {\n        id: number | null\n        value: number | null\n    }\n    inGame: number[]\n    valuesOfRemoved: number[]\n}\n\nconst initialState: CardsState = {\n    first: {\n        id: null,\n        value: null,\n    },\n    second: {\n        id: null,\n        value: null,\n    },\n    inGame: [],\n    valuesOfRemoved: [],\n}\n\nexport const cardsSlice = createSlice({\n    name: 'cards',\n    initialState,\n    reducers: {\n        setFirstId: (state, {payload}) => {\n            state.first.id = payload\n        },\n        setFirstValue: (state, {payload}) => {\n            state.first.value = payload\n        },\n        setSecondId: (state, {payload}) => {\n            state.second.id = payload\n        },\n        setSecondValue: (state, {payload}) => {\n            state.second.value = payload\n        },\n        removeValueOfPairedCards: (state, {payload}: PayloadAction<number>) => {\n            state.valuesOfRemoved = [...state.valuesOfRemoved, payload]\n        },\n        resetCards: state => {\n            state.first.id = null\n            state.first.value = null\n            state.second.id = null\n            state.second.value = null\n        },\n        resetValuesOfRemoved: state => {\n            state.valuesOfRemoved = []\n        },\n    },\n})\n\nexport const {\n    setFirstId,\n    setFirstValue,\n    setSecondId,\n    setSecondValue,\n    resetCards,\n    removeValueOfPairedCards,\n    resetValuesOfRemoved,\n} = cardsSlice.actions\n\nexport default cardsSlice.reducer","import React, {useEffect} from 'react'\nimport useAppSelector from '../hooks/useAppSelector'\nimport useAppDispatch from '../hooks/useAppDispatch'\nimport {gameStart, gameStop, addResult, resetPoints, resetWin} from '../store/gameSlice'\nimport {tickStopWatch, resetStopwatch, resetTimer} from '../store/timeSlice'\nimport {resetCards, resetValuesOfRemoved} from '../store/cardsSlice'\n\nfunction GameBar() {\n    const dispatch = useAppDispatch()\n\n    const stopwatch = useAppSelector(state => state.time.stopwatch)\n    const timer = useAppSelector(state => state.time.timer)\n    const points = useAppSelector(state => state.game.points)\n    const started = useAppSelector(state => state.game.started)\n    const won = useAppSelector(state => state.game.won)\n\n    function handleClick() {\n        dispatch(resetWin())\n        dispatch(started ? gameStop() : gameStart())\n    }\n\n    useEffect(() => {\n        timer === 0 && dispatch(gameStop())\n    }, [timer])\n\n    useEffect(() => {\n        if (started) {\n            let seconds = 1\n\n            const timer = setInterval(() => {\n                dispatch(tickStopWatch(seconds++))\n            }, 1000)\n\n            return () => clearInterval(timer)\n        } else {\n            if (stopwatch !== '00:00:00') {\n                dispatch(addResult({stopwatch: won ? `👑 ${stopwatch}` : stopwatch, points}))\n            }\n            dispatch(resetCards())\n            dispatch(resetValuesOfRemoved())\n            dispatch(resetStopwatch())\n            dispatch(resetTimer())\n            dispatch(resetPoints())\n        }\n    }, [started])\n\n    return (\n        <div className=\"game-bar\">\n            <h2>{stopwatch}</h2>\n            <h2>Счет: {points}</h2>\n            <button onClick={handleClick} className=\"start-btn\">{started ? 'Стоп' : 'Старт'}</button>\n        </div>\n    )\n}\n\nexport default GameBar","import React from 'react'\n\nfunction PlaygroundWinMessage() {\n    return (\n        <div className=\"win\">\n            👑 🎉 Вы выиграли!\n        </div>\n    )\n}\n\nexport default PlaygroundWinMessage","import React from 'react'\nimport useAppSelector from '../hooks/useAppSelector'\n\nfunction PlaygroundTimer() {\n    const timer = useAppSelector(state => state.time.timer)\n\n    return (\n        <span className=\"timer\">{timer}</span>\n    )\n}\n\nexport default PlaygroundTimer","import React from 'react'\nimport useAppDispatch from '../hooks/useAppDispatch'\nimport {setFirstId, setFirstValue, setSecondId, setSecondValue} from '../store/cardsSlice'\n\nfunction PlaygroundTableCard({id, value, firstId, secondId, gameStarted, cardRemoved}: PlaygroundCard) {\n    const dispatch = useAppDispatch()\n\n    function handleClick() {\n        if (!gameStarted) return\n\n        if (firstId === null) {\n            dispatch(setFirstId(id))\n            dispatch(setFirstValue(value))\n        } else if (secondId === null && firstId !== id) {\n            dispatch(setSecondId(id))\n            dispatch(setSecondValue(value))\n        }\n    }\n\n    return (\n        <td>\n            {!cardRemoved && (\n                <div className={`card ${!gameStarted ? 'disabled' : ''}`}\n                     onClick={handleClick}>\n                    {(firstId === id || secondId === id) ? (\n                        <img src={`/img/${value}.png`} alt={value.toString()} width={60}/>\n                    ) : (\n                        <img src={`/img/question.png`} alt=\"Unselected card\" width={60}/>\n                    )}\n                </div>\n            )}\n        </td>\n    )\n}\n\nexport default PlaygroundTableCard","import React from 'react'\nimport useAppSelector from '../hooks/useAppSelector'\nimport PlaygroundTableCard from './PlaygroundTableCard'\n\nfunction PlaygroundTable({cards}: { cards: CardRow[][] }) {\n    const firstCardId = useAppSelector(state => state.cards.first.id)\n    const secondCardId = useAppSelector(state => state.cards.second.id)\n    const valuesOfRemoved = useAppSelector(state => state.cards.valuesOfRemoved)\n\n    const won = useAppSelector(state => state.game.won)\n    const started = useAppSelector(state => state.game.started)\n\n    return (\n        <table className={`playground ${won ? 'blurred' : ''}`}>\n            <tbody>\n            {cards.map((row, index) => (\n                <tr key={index}>\n                    {row.map(({id, value}) => (\n                        <PlaygroundTableCard\n                            id={id}\n                            value={value}\n                            cardRemoved={valuesOfRemoved.includes(value)}\n                            gameStarted={started}\n                            firstId={firstCardId}\n                            secondId={secondCardId}\n                            key={id}\n                        />\n                    ))}\n                </tr>\n            ))}\n            </tbody>\n        </table>\n    )\n}\n\nexport default PlaygroundTable","function shuffle<T>(array: T[]): T[] {\n    return array.sort(() => Math.random() - 0.5)\n}\n\nexport default shuffle","import shuffle from './shuffle'\n\nfunction initCards(totalCards: number | string) {\n    const result = []\n    const count = totalCards\n    const side = Math.sqrt(+totalCards * 2)\n    let currentValue = 1\n    let currentId = 1\n\n    for (let i = 1; i <= side; i++) {\n        let row: CardRow[] = []\n\n        for (let j = 1; j <= side; j++) {\n            if (currentValue > count) {\n                currentValue = 1\n            }\n\n            row.push({\n                id: currentId++,\n                value: currentValue++,\n            })\n        }\n\n        result.push(shuffle<CardRow>(row))\n    }\n\n    return result\n}\n\nexport default initCards","import React, {useEffect, useState} from 'react'\nimport PlaygroundWinMessage from './PlaygroundWinMessage'\nimport useAppSelector from '../hooks/useAppSelector'\nimport PlaygroundTimer from './PlaygroundTimer'\nimport PlaygroundTable from './PlaygroundTable'\nimport useAppDispatch from '../hooks/useAppDispatch'\nimport {resetCards, removeValueOfPairedCards} from '../store/cardsSlice'\nimport {addPoint, gameStop, win} from '../store/gameSlice'\nimport {resetTimer, tickTimer} from '../store/timeSlice'\nimport initCards from '../support/initCards'\n\nfunction Playground() {\n    const dispatch = useAppDispatch()\n\n    const [cards, setCards] = useState<CardRow[][]>([])\n\n    const firstCardValue = useAppSelector(state => state.cards.first.value)\n    const secondCardValue = useAppSelector(state => state.cards.second.value)\n    const valuesOfRemoved = useAppSelector(state => state.cards.valuesOfRemoved)\n    const won = useAppSelector(state => state.game.won)\n    const started = useAppSelector(state => state.game.started)\n\n    useEffect(() => {\n        tickTimer()\n        const TOTAL_CARDS = process.env.REACT_APP_TOTAL_CARDS\n\n        if (TOTAL_CARDS) {\n            setCards(initCards(TOTAL_CARDS))\n        } else {\n            alert('REACT_APP_TOTAL_CARDS не найден в .env')\n        }\n    }, [started])\n\n    useEffect(() => {\n        if (firstCardValue !== null) {\n            const timer = setInterval(() => {\n                dispatch(tickTimer())\n            }, 1000)\n\n            return () => clearInterval(timer)\n        }\n    }, [firstCardValue])\n\n    useEffect(() => {\n        if (firstCardValue !== null && secondCardValue !== null) {\n            setTimeout(() => {\n                if (firstCardValue === secondCardValue) {\n                    dispatch(addPoint())\n                    dispatch(removeValueOfPairedCards(firstCardValue))\n                }\n\n                dispatch(resetCards())\n                dispatch(resetTimer())\n            }, 600)\n        }\n    }, [secondCardValue])\n\n    useEffect(() => {\n        const TOTAL_CARDS = process.env.REACT_APP_TOTAL_CARDS\n\n        if (valuesOfRemoved.length.toString() === TOTAL_CARDS) {\n            dispatch(win())\n            dispatch(gameStop())\n        }\n    }, [valuesOfRemoved])\n\n    return (\n        <div className=\"area\">\n            {firstCardValue && <PlaygroundTimer/>}\n            {won && <PlaygroundWinMessage/>}\n            <PlaygroundTable cards={cards}/>\n        </div>\n    )\n}\n\nexport default Playground","import React from 'react'\n\nfunction ResultTableItem({stopwatch, points}: ResultItem) {\n    return (\n        <tr>\n            <td>{stopwatch}</td>\n            <td>{points}</td>\n        </tr>\n    )\n}\n\nexport default ResultTableItem","import React from 'react'\nimport ResultTableItem from './ResultTableItem'\nimport useAppSelector from '../hooks/useAppSelector'\n\nfunction ResultTable() {\n    const result = useAppSelector(state => state.game.result)\n\n    return (\n        <table className=\"result\">\n            <thead>\n            <tr>\n                <th>Время</th>\n                <th>Счет</th>\n            </tr>\n            </thead>\n            <tbody>\n            {result.map(({stopwatch, points}, index) => (\n                <ResultTableItem stopwatch={stopwatch} points={points} key={index}/>\n            ))}\n            </tbody>\n        </table>\n    )\n}\n\nexport default ResultTable","import React from 'react'\nimport ResultTable from './ResultTable'\n\nfunction Result() {\n    return (\n        <div className=\"area\">\n            <ResultTable/>\n        </div>\n    )\n}\n\nexport default Result","import React from 'react'\nimport GameBar from './components/GameBar'\nimport Playground from './components/Playground'\nimport Result from './components/Result'\n\nfunction App() {\n    return (\n        <div className=\"container\">\n            <GameBar/>\n\n            <div className=\"wrapper\">\n                <Playground/>\n                <Result/>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import {configureStore} from '@reduxjs/toolkit'\nimport cardsReducer from './store/cardsSlice'\nimport gameReducer from './store/gameSlice'\nimport timeReducer from './store/timeSlice'\n\nconst store = configureStore({\n    reducer: {\n        cards: cardsReducer,\n        game: gameReducer,\n        time: timeReducer,\n    },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)"],"sourceRoot":""}