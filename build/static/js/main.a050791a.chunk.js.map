{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","firstCardId","setFirstCardId","secondCardId","setSecondCardId","firstCardValue","setFirstCardValue","secondCardValue","setSecondCardValue","cards","setCards","removed","setRemoved","points","setPoints","countdown","setCountdown","started","setStarted","stopwatch","setStopwatch","results","setResults","win","setWin","saveResults","crown","prev","resetCards","useEffect","totalCards","result","count","side","Math","sqrt","currentValue","currentId","i","row","j","push","id","value","sort","random","initCardsArray","setTimeout","counter","timer","setInterval","moment","hour","minute","second","format","clearInterval","length","className","onClick","map","index","includes","handleClick","src","alt","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a050791a.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport moment from 'moment'\n\nconst TOTAL_CARDS = 18\n\nfunction initCardsArray(totalCards: number) {\n    const result = []\n    const count = totalCards\n    const side = Math.sqrt(totalCards * 2)\n    let currentValue = 1\n    let currentId = 1\n\n    function shuffle<T>(array: T[]): T[] {\n        return array.sort(() => Math.random() - 0.5)\n    }\n\n    for (let i = 1; i <= side; i++) {\n        let row: CardRow[] = []\n\n        for (let j = 1; j <= side; j++) {\n            if (currentValue > count) {\n                currentValue = 1\n            }\n\n            row.push({\n                id: currentId++,\n                value: currentValue++,\n            })\n        }\n\n        result.push(shuffle<CardRow>(row))\n    }\n\n    return result\n}\n\nfunction App() {\n    const [firstCardId, setFirstCardId] = useState<number | null>(null)\n    const [secondCardId, setSecondCardId] = useState<number | null>(null)\n\n    const [firstCardValue, setFirstCardValue] = useState<number | null>(null)\n    const [secondCardValue, setSecondCardValue] = useState<number | null>(null)\n\n    const [cards, setCards] = useState<CardRow[][]>([])\n    const [removed, setRemoved] = useState<number[]>([])\n    const [points, setPoints] = useState(0)\n\n    const [countdown, setCountdown] = useState(5)\n    const [started, setStarted] = useState(false)\n    const [stopwatch, setStopwatch] = useState('00:00:00')\n\n    const [results, setResults] = useState<{ stopwatch: string, points: number }[]>([])\n    const [win, setWin] = useState(false)\n\n    useEffect(() => {\n        setCards(initCardsArray(TOTAL_CARDS))\n    }, [])\n\n    useEffect(() => {\n        if (firstCardValue && secondCardValue) {\n            setTimeout(() => {\n                if (firstCardValue === secondCardValue) {\n                    setPoints(prev => prev + 1)\n                    setRemoved(prev => [...prev, firstCardValue])\n                }\n\n                resetCards()\n            }, 600)\n        }\n    }, [secondCardValue])\n\n    useEffect(() => {\n        if (started) {\n            let counter = 1\n\n            const timer = setInterval(() => {\n                setStopwatch(moment().hour(0).minute(0).second(counter++).format('HH:mm:ss'))\n            }, 1000)\n\n            return () => clearInterval(timer)\n        }\n    }, [started])\n\n    useEffect(() => {\n        if (firstCardValue) {\n            const timer = setInterval(() => {\n                setCountdown(prev => prev - 1)\n            }, 1000)\n\n            return () => clearInterval(timer)\n        }\n    }, [firstCardValue])\n\n    useEffect(() => {\n        countdown === 0 && saveResults()\n    }, [countdown])\n\n    useEffect(() => {\n        if (removed.length === TOTAL_CARDS) {\n            setWin(true)\n            saveResults(true)\n        }\n    }, [removed])\n\n    function saveResults(crown = false) {\n        setResults(prev => [{stopwatch: crown ? `👑 ${stopwatch}` : stopwatch, points}, ...prev])\n        resetCards()\n        setRemoved([])\n\n        setStarted(false)\n        setStopwatch('00:00:00')\n        setPoints(0)\n    }\n\n    function handleClick(id: number, value: number) {\n        if (!started) return\n\n        if (firstCardId === null) {\n            setFirstCardId(id)\n            setFirstCardValue(value)\n        } else if (secondCardId === null && firstCardId !== id) {\n            setSecondCardId(id)\n            setSecondCardValue(value)\n        }\n    }\n\n    function resetCards() {\n        setFirstCardId(null)\n        setFirstCardValue(null)\n        setSecondCardId(null)\n        setSecondCardValue(null)\n        setCountdown(5)\n    }\n\n    function toggleStart() {\n        setWin(false)\n        !started ? setStarted(true) : saveResults()\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"header\">\n                <h2>{stopwatch}</h2>\n                <h2>Счет: {points}</h2>\n                <button onClick={toggleStart} className=\"start-btn\">{started ? 'Стоп!' : 'Старт!'}</button>\n            </div>\n\n            <div className=\"wrapper\">\n                <div className=\"area\">\n                    <span className=\"countdown\">{firstCardValue && countdown}</span>\n\n                    {win && (\n                        <div className=\"win\">\n                            👑 🎉 Вы выиграли!\n                        </div>\n                    )}\n\n                    <table className={`playground ${win ? 'blurred' : ''}`}>\n                        <tbody>\n                        {cards.map((row, index) => (\n                            <tr key={index}>\n                                {row.map(({id, value}, index) => (\n                                    <td key={index}>\n                                        {!removed.includes(value) && (\n                                            <div className={`card ${!started ? 'disabled' : ''}`}\n                                                 onClick={() => handleClick(id, value)}>\n                                                {(firstCardId === id || secondCardId === id) ? (\n                                                    <img src={`/img/${value}.png`} alt=\"\" width={60}/>\n                                                ) : (\n                                                    <img src={`/img/question.png`} alt=\"\" width={60}/>\n                                                )}\n                                            </div>\n                                        )}\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </div>\n\n                <div className=\"area\">\n                    <table className=\"result\">\n                        <thead>\n                        <tr>\n                            <th>Время</th>\n                            <th>Счет</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {results.map(({stopwatch, points}, index) => (\n                            <tr key={index}>\n                                <td>{stopwatch}</td>\n                                <td>{points}</td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}