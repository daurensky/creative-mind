{"version":3,"sources":["hooks/useAppSelector.ts","hooks/useAppDispatch.ts","store/gameSlice.ts","store/timeSlice.ts","store/cardsSlice.ts","components/Header.tsx","components/WinMessage.tsx","components/Timer.tsx","components/PlaygroundCard.tsx","components/Playground.tsx","support/shuffle.ts","support/initCards.ts","components/AreaPlayground.tsx","components/ResultItem.tsx","components/Result.tsx","components/AreaResult.tsx","App.tsx","store.ts","index.tsx"],"names":["useAppSelector","useSelector","useAppDispatch","useDispatch","gameSlice","createSlice","name","initialState","won","started","points","result","reducers","win","state","resetWin","gameStart","gameStop","addPoint","addResult","payload","resetPoints","actions","timeSlice","timer","stopwatch","tickTimer","tickStopWatch","moment","hour","minute","second","format","resetTimer","resetStopwatch","cardsSlice","first","id","value","inGame","valuesOfRemoved","setFirstId","setFirstValue","setSecondId","setSecondValue","removeValueOfPairedCards","resetCards","resetValuesOfRemoved","Header","dispatch","time","game","useEffect","seconds","setInterval","clearInterval","className","onClick","WinMessage","Timer","PlaygroundCard","firstId","secondId","gameStarted","cardRemoved","src","alt","toString","width","Playground","cards","firstCardId","secondCardId","map","row","index","includes","shuffle","array","sort","Math","random","initCards","totalCards","count","side","sqrt","currentValue","currentId","i","j","push","AreaPlayground","useState","setCards","firstCardValue","secondCardValue","process","setTimeout","length","ResultItem","Result","AreaResult","App","store","configureStore","reducer","cardsReducer","gameReducer","timeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da553ac9.chunk.js","sourcesContent":["import {TypedUseSelectorHook, useSelector} from 'react-redux'\r\nimport type {RootState} from '../store'\r\n\r\nconst useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n\r\nexport default useAppSelector","import {useDispatch} from 'react-redux'\r\nimport type {AppDispatch} from '../store'\r\n\r\nconst useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport default useAppDispatch","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\ninterface GameState {\r\n    won: boolean\r\n    started: boolean\r\n    points: number\r\n    result: ResultItem[]\r\n}\r\n\r\nconst initialState: GameState = {\r\n    won: false,\r\n    started: false,\r\n    points: 0,\r\n    result: [],\r\n}\r\n\r\nexport const gameSlice = createSlice({\r\n    name: 'game',\r\n    initialState,\r\n    reducers: {\r\n        win: state => {\r\n            state.won = true\r\n        },\r\n        resetWin: state => {\r\n            state.won = false\r\n        },\r\n        gameStart: state => {\r\n            state.started = true\r\n        },\r\n        gameStop: state => {\r\n            state.started = false\r\n        },\r\n        addPoint: state => {\r\n            state.points += 1\r\n        },\r\n        addResult: (state, {payload}: PayloadAction<ResultItem>) => {\r\n            state.result = [payload, ...state.result]\r\n        },\r\n        resetPoints: state => {\r\n            state.points = 0\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    win,\r\n    resetWin,\r\n    gameStart,\r\n    gameStop,\r\n    addPoint,\r\n    addResult,\r\n    resetPoints,\r\n} = gameSlice.actions\r\n\r\nexport default gameSlice.reducer","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport moment from 'moment'\r\n\r\nexport const timeSlice = createSlice({\r\n    name: 'time',\r\n    initialState: {\r\n        timer: 5,\r\n        stopwatch: '00:00:00',\r\n    },\r\n    reducers: {\r\n        tickTimer: state => {\r\n            state.timer -= 1\r\n        },\r\n        tickStopWatch: (state, {payload}: PayloadAction<number>) => {\r\n            state.stopwatch = moment().hour(0).minute(0).second(payload).format('HH:mm:ss')\r\n        },\r\n        resetTimer: state => {\r\n            state.timer = 5\r\n        },\r\n        resetStopwatch: state => {\r\n            state.stopwatch = '00:00:00'\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    tickTimer,\r\n    resetTimer,\r\n    tickStopWatch,\r\n    resetStopwatch,\r\n} = timeSlice.actions\r\n\r\nexport default timeSlice.reducer","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\ninterface CardsState {\r\n    first: {\r\n        id: number | null\r\n        value: number | null\r\n    }\r\n    second: {\r\n        id: number | null\r\n        value: number | null\r\n    }\r\n    inGame: number[]\r\n    valuesOfRemoved: number[]\r\n}\r\n\r\nconst initialState: CardsState = {\r\n    first: {\r\n        id: null,\r\n        value: null,\r\n    },\r\n    second: {\r\n        id: null,\r\n        value: null,\r\n    },\r\n    inGame: [],\r\n    valuesOfRemoved: [],\r\n}\r\n\r\nexport const cardsSlice = createSlice({\r\n    name: 'cards',\r\n    initialState,\r\n    reducers: {\r\n        setFirstId: (state, {payload}) => {\r\n            state.first.id = payload\r\n        },\r\n        setFirstValue: (state, {payload}) => {\r\n            state.first.value = payload\r\n        },\r\n        setSecondId: (state, {payload}) => {\r\n            state.second.id = payload\r\n        },\r\n        setSecondValue: (state, {payload}) => {\r\n            state.second.value = payload\r\n        },\r\n        removeValueOfPairedCards: (state, {payload}: PayloadAction<number>) => {\r\n            state.valuesOfRemoved = [...state.valuesOfRemoved, payload]\r\n        },\r\n        resetCards: state => {\r\n            state.first.id = null\r\n            state.first.value = null\r\n            state.second.id = null\r\n            state.second.value = null\r\n        },\r\n        resetValuesOfRemoved: state => {\r\n            state.valuesOfRemoved = []\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    setFirstId,\r\n    setFirstValue,\r\n    setSecondId,\r\n    setSecondValue,\r\n    resetCards,\r\n    removeValueOfPairedCards,\r\n    resetValuesOfRemoved,\r\n} = cardsSlice.actions\r\n\r\nexport default cardsSlice.reducer","import React, {useEffect} from 'react'\r\nimport useAppSelector from '../hooks/useAppSelector'\r\nimport useAppDispatch from '../hooks/useAppDispatch'\r\nimport {gameStart, gameStop, addResult, resetPoints, resetWin} from '../store/gameSlice'\r\nimport {tickStopWatch, resetStopwatch, resetTimer} from '../store/timeSlice'\r\nimport {resetCards, resetValuesOfRemoved} from '../store/cardsSlice'\r\n\r\nfunction Header() {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const stopwatch = useAppSelector(state => state.time.stopwatch)\r\n    const timer = useAppSelector(state => state.time.timer)\r\n    const points = useAppSelector(state => state.game.points)\r\n    const started = useAppSelector(state => state.game.started)\r\n    const won = useAppSelector(state => state.game.won)\r\n\r\n    function handleClick() {\r\n        dispatch(resetWin())\r\n        dispatch(started ? gameStop() : gameStart())\r\n    }\r\n\r\n    useEffect(() => {\r\n        timer === 0 && dispatch(gameStop())\r\n    }, [timer])\r\n\r\n    useEffect(() => {\r\n        if (started) {\r\n            let seconds = 1\r\n\r\n            const timer = setInterval(() => {\r\n                dispatch(tickStopWatch(seconds++))\r\n            }, 1000)\r\n\r\n            return () => clearInterval(timer)\r\n        } else {\r\n            if (stopwatch !== '00:00:00') {\r\n                dispatch(addResult({stopwatch: won ? `👑 ${stopwatch}` : stopwatch, points}))\r\n            }\r\n            dispatch(resetCards())\r\n            dispatch(resetValuesOfRemoved())\r\n            dispatch(resetStopwatch())\r\n            dispatch(resetTimer())\r\n            dispatch(resetPoints())\r\n        }\r\n    }, [started])\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <h2>{stopwatch}</h2>\r\n            <h2>Счет: {points}</h2>\r\n            <button onClick={handleClick} className=\"start-btn\">{started ? 'Стоп' : 'Старт'}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nfunction WinMessage() {\r\n    return (\r\n        <div className=\"win\">\r\n            👑 🎉 Вы выиграли!\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WinMessage","import React from 'react'\r\nimport useAppSelector from '../hooks/useAppSelector'\r\n\r\nfunction Timer() {\r\n    const timer = useAppSelector(state => state.time.timer)\r\n\r\n    return (\r\n        <span className=\"countdown\">{timer}</span>\r\n    )\r\n}\r\n\r\nexport default Timer","import React from 'react'\r\nimport useAppDispatch from '../hooks/useAppDispatch'\r\nimport {setFirstId, setFirstValue, setSecondId, setSecondValue} from '../store/cardsSlice'\r\n\r\nfunction PlaygroundCard({id, value, firstId, secondId, gameStarted, cardRemoved}: PlaygroundCard) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    function handleClick() {\r\n        if (!gameStarted) return\r\n\r\n        if (firstId === null) {\r\n            dispatch(setFirstId(id))\r\n            dispatch(setFirstValue(value))\r\n        } else if (secondId === null && firstId !== id) {\r\n            dispatch(setSecondId(id))\r\n            dispatch(setSecondValue(value))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <td>\r\n            {!cardRemoved && (\r\n                <div className={`card ${!gameStarted ? 'disabled' : ''}`}\r\n                     onClick={handleClick}>\r\n                    {(firstId === id || secondId === id) ? (\r\n                        <img src={`/img/${value}.png`} alt={value.toString()} width={60}/>\r\n                    ) : (\r\n                        <img src={`/img/question.png`} alt=\"Unselected card\" width={60}/>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </td>\r\n    )\r\n}\r\n\r\nexport default PlaygroundCard","import React, {useEffect, useState} from 'react'\r\nimport useAppSelector from '../hooks/useAppSelector'\r\nimport PlaygroundCard from './PlaygroundCard'\r\nimport initCards from '../support/initCards'\r\n\r\nfunction Playground({cards}: { cards: CardRow[][] }) {\r\n    const firstCardId = useAppSelector(state => state.cards.first.id)\r\n    const secondCardId = useAppSelector(state => state.cards.second.id)\r\n    const valuesOfRemoved = useAppSelector(state => state.cards.valuesOfRemoved)\r\n\r\n    const won = useAppSelector(state => state.game.won)\r\n    const started = useAppSelector(state => state.game.started)\r\n\r\n    return (\r\n        <table className={`playground ${won ? 'blurred' : ''}`}>\r\n            <tbody>\r\n            {cards.map((row, index) => (\r\n                <tr key={index}>\r\n                    {row.map(({id, value}) => (\r\n                        <PlaygroundCard\r\n                            id={id}\r\n                            value={value}\r\n                            cardRemoved={valuesOfRemoved.includes(value)}\r\n                            gameStarted={started}\r\n                            firstId={firstCardId}\r\n                            secondId={secondCardId}\r\n                            key={id}\r\n                        />\r\n                    ))}\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Playground","function shuffle<T>(array: T[]): T[] {\r\n    return array.sort(() => Math.random() - 0.5)\r\n}\r\n\r\nexport default shuffle","import shuffle from './shuffle'\r\n\r\nfunction initCards(totalCards: number | string) {\r\n    const result = []\r\n    const count = totalCards\r\n    const side = Math.sqrt(+totalCards * 2)\r\n    let currentValue = 1\r\n    let currentId = 1\r\n\r\n    for (let i = 1; i <= side; i++) {\r\n        let row: CardRow[] = []\r\n\r\n        for (let j = 1; j <= side; j++) {\r\n            if (currentValue > count) {\r\n                currentValue = 1\r\n            }\r\n\r\n            row.push({\r\n                id: currentId++,\r\n                value: currentValue++,\r\n            })\r\n        }\r\n\r\n        result.push(shuffle<CardRow>(row))\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nexport default initCards","import React, {useEffect, useState} from 'react'\r\nimport WinMessage from './WinMessage'\r\nimport useAppSelector from '../hooks/useAppSelector'\r\nimport Timer from './Timer'\r\nimport Playground from './Playground'\r\nimport useAppDispatch from '../hooks/useAppDispatch'\r\nimport {resetCards, removeValueOfPairedCards} from '../store/cardsSlice'\r\nimport {addPoint, gameStop, win} from '../store/gameSlice'\r\nimport {resetTimer, tickTimer} from '../store/timeSlice'\r\nimport initCards from '../support/initCards'\r\n\r\nfunction AreaPlayground() {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const [cards, setCards] = useState<CardRow[][]>([])\r\n\r\n    const firstCardValue = useAppSelector(state => state.cards.first.value)\r\n    const secondCardValue = useAppSelector(state => state.cards.second.value)\r\n    const valuesOfRemoved = useAppSelector(state => state.cards.valuesOfRemoved)\r\n    const won = useAppSelector(state => state.game.won)\r\n    const started = useAppSelector(state => state.game.started)\r\n\r\n    useEffect(() => {\r\n        tickTimer()\r\n        const TOTAL_CARDS = process.env.REACT_APP_TOTAL_CARDS\r\n\r\n        if (TOTAL_CARDS) {\r\n            setCards(initCards(TOTAL_CARDS))\r\n        } else {\r\n            alert('REACT_APP_TOTAL_CARDS не найден в .env')\r\n        }\r\n    }, [started])\r\n\r\n    useEffect(() => {\r\n        if (firstCardValue !== null) {\r\n            const timer = setInterval(() => {\r\n                dispatch(tickTimer())\r\n            }, 1000)\r\n\r\n            return () => clearInterval(timer)\r\n        }\r\n    }, [firstCardValue])\r\n\r\n    useEffect(() => {\r\n        if (firstCardValue !== null && secondCardValue !== null) {\r\n            setTimeout(() => {\r\n                if (firstCardValue === secondCardValue) {\r\n                    dispatch(addPoint())\r\n                    dispatch(removeValueOfPairedCards(firstCardValue))\r\n                }\r\n\r\n                dispatch(resetCards())\r\n                dispatch(resetTimer())\r\n            }, 600)\r\n        }\r\n    }, [secondCardValue])\r\n\r\n    useEffect(() => {\r\n        const TOTAL_CARDS = process.env.REACT_APP_TOTAL_CARDS\r\n\r\n        if (valuesOfRemoved.length.toString() === TOTAL_CARDS) {\r\n            dispatch(win())\r\n            dispatch(gameStop())\r\n        }\r\n    }, [valuesOfRemoved])\r\n\r\n    return (\r\n        <div className=\"area\">\r\n            {firstCardValue && <Timer/>}\r\n            {won && <WinMessage/>}\r\n            <Playground cards={cards}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AreaPlayground","import React from 'react'\r\n\r\nfunction ResultItem({stopwatch, points}: ResultItem) {\r\n    return (\r\n        <tr>\r\n            <td>{stopwatch}</td>\r\n            <td>{points}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default ResultItem","import React from 'react'\r\nimport ResultItem from './ResultItem'\r\nimport useAppSelector from '../hooks/useAppSelector'\r\n\r\nfunction Result() {\r\n    const result = useAppSelector(state => state.game.result)\r\n\r\n    return (\r\n        <table className=\"result\">\r\n            <thead>\r\n            <tr>\r\n                <th>Время</th>\r\n                <th>Счет</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {result.map(({stopwatch, points}, index) => (\r\n                <ResultItem stopwatch={stopwatch} points={points} key={index}/>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Result","import React from 'react'\r\nimport Result from './Result'\r\n\r\nfunction AreaResult() {\r\n    return (\r\n        <div className=\"area\">\r\n            <Result/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AreaResult","import React from 'react'\nimport Header from './components/Header'\nimport AreaPlayground from './components/AreaPlayground'\nimport AreaResult from './components/AreaResult'\n\nfunction App() {\n    return (\n        <div className=\"container\">\n            <Header/>\n\n            <div className=\"wrapper\">\n                <AreaPlayground/>\n                <AreaResult/>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import {configureStore} from '@reduxjs/toolkit'\r\nimport cardsReducer from './store/cardsSlice'\r\nimport gameReducer from './store/gameSlice'\r\nimport timeReducer from './store/timeSlice'\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        cards: cardsReducer,\r\n        game: gameReducer,\r\n        time: timeReducer,\r\n    },\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)"],"sourceRoot":""}